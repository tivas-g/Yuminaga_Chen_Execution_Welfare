import subprocess
import json
import requests

def get_order_data(serialized_order):
    try:
        # Provide an absolute path to the TypeScript file and use ts-node to run it
        ts_file_path = 'index.mjs'  # Change the file extension to .js

        # Call the Node.js script and capture the output
        output = subprocess.check_output(['node', ts_file_path, serialized_order], stderr=subprocess.PIPE)

        # Convert the JSON string to a Python dictionary
        order_data = json.loads(output)

        # Print the order data
        return order_data
    except subprocess.CalledProcessError as e:
        print(f"Error executing the JavaScript subprocess: {e}")
        return None  # Return None in case of an exception
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None  # Return None for other exceptions

def get_taker_address(log_emission):
    for log in log_emission:
        if log['topics'][0] =='0x78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66':
            return '0x'+log['topics'][2][26:66].lower()

def decode4all(calldata):
    serialized_order="0x"+calldata[266:-256]
    order_data=get_order_data(serialized_order)
    if order_data == None:
        return "MULTIPLE","MULTIPLE","MULTIPLE","MULTIPLE"
    # print(order_data)
    maker_address=order_data['swapper'].lower()
    input_asset=order_data['input']['token'].lower()
    if len(order_data['outputs']) == 1:
        output_asset = order_data['outputs'][0]['token'].lower()
        recipient_address = order_data['outputs'][0]['recipient'].lower()
    else:
        if maker_address in [i['recipient'].lower() for i in order_data['outputs']]:
            for i in  order_data['outputs']:
                if i['recipient'].lower() == maker_address:
                    output_asset = i['token'].lower()
                    recipient_address = i['recipient'].lower()
        else:
            output_asset = "MULTIPLE"
            recipient_address = "MULTIPLE"

    return maker_address,input_asset,output_asset,recipient_address

def findETHtransferred(tx_hash,receipient_address,credentials):
    base_url = "https://api.etherscan.io/api"

    api_key = credentials.get('ETHERSCAN_APIKEY')

    params = {
        'module': 'account',
        'action': 'txlistinternal',
        'txhash': tx_hash,
        'apikey': api_key
    }

    response = requests.get(base_url, params=params)
    internal_txs = response.json()
    for internal_tx in internal_txs['result']:
        if internal_tx['to'] == receipient_address:
            return int(internal_tx['value'])

#findETHtransferred('0xda18ff770f0f923cbc4189a123cc505d1624cff71a14d9218604767530d02ab4','0x580be1ff49fb1f0a2d4c0afb6e81f407f7d91efd')
# print(decode4all("0x3f62192e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000006585ccc3000000000000000000000000000000000000000000000000000000006585ccff0000000000000000000000002008b6c3d07b061a84f790c035c2f6dc11a0be700000000000000000000000000000000000000000000000000000000000000064000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000091011587000000000000000000000000000000000000000000000000000000009101158700000000000000000000000000000000000000000000000000000000000002000000000000000000000000006000da47483062a0d734ba3dc7576ce6a0b645c4000000000000000000000000527334be9482576112b864dcf37fcfb921325cb50468321b1e7ebacf1ed3e0f56fd17a2a740c1c3987dda8cce764210a7a862400000000000000000000000000000000000000000000000000000000006585cd0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000e5efd9bad79a4be0000000000000000000000000000000000000000000000000e1f849588765b37000000000000000000000000527334be9482576112b864dcf37fcfb921325cb5000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000586dacd3d756a00000000000000000000000000000000000000000000000000056e71cd91ad1100000000000000000000000037a8f295612602f2774d331e562be9e61b83a3270000000000000000000000000000000000000000000000000000000000000041d29dd466f57a5887821756778078d67b5d28d127e8e1df0862943481a62e6ab07da046f5079d10d97ff21ea7891cf3a416d8780c78b190def017d87bc0d0d11e1c00000000000000000000000000000000000000000000000000000000000000"))

# print(get_order_data("0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000065a98af10000000000000000000000000000000000000000000000000000000065a98b2d00000000000000000000000091afe96ed862cb3a2df3a9f93d118189a06373270000000000000000000000000000000000000000000000000000000000000064000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000017d784000000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000000000000000002000000000000000000000000006000da47483062a0d734ba3dc7576ce6a0b645c4000000000000000000000000580be1ff49fb1f0a2d4c0afb6e81f407f7d91efd0468327d1dbf9abd9b0bd36dbc4497e1b9ee1cd1de893ae5f6fee4732c2034000000000000000000000000000000000000000000000000000000000065a98b39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000224ad05dce82db000000000000000000000000000000000000000000000000001f61d966e2cd2e4000000000000000000000000580be1ff49fb1f0a2d4c0afb6e81f407f7d91efd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d3020f5492350000000000000000000000000000000000000000000000000000c11a1eee814700000000000000000000000037a8f295612602f2774d331e562be9e61b83a327"))